const InventoryManager = require("../Classes/InventoryManager");
const PlayerManager = require("../Classes/PlayerManager");
const Inventory = require('../Classes/Inventory');
const Player = require("../Classes/Player");
const ItemList = require("../Data/ItemList.json");
const Discord = require("discord.js");

let invReact = ["‚öîÔ∏è", "üóëÔ∏è"];
let equipReact = ["1Ô∏è‚É£","2Ô∏è‚É£","3Ô∏è‚É£","4Ô∏è‚É£","5Ô∏è‚É£","6Ô∏è‚É£","7Ô∏è‚É£","8Ô∏è‚É£","9Ô∏è‚É£"];
let msgInventory;
let playerManager = new PlayerManager();
let inventoryManager = new InventoryManager();
let embed;

const InventoryCommand = async function(message){
    let inventory = await inventoryManager.getInventory(message);
    embed = new Discord.MessageEmbed();
    msgInventory = await message.channel.send(embed);
    DisplayInventory(message,inventory);
}

/**
 * Envoie un message affichant l'inventaire du joueur.
 * Ajoute des r√©actions a ce message pour que le joueur puisse int√©ragir avec son inventaire.
 * @param {Discord.Message} message Message contenant la commande envoy√©e par le joueur.
 * @param {Inventory} inventory Inventaire du joueur.
 */
async function DisplayInventory(message, inventory){
    let player = await playerManager.getPlayerByID(message);
    embed = new Discord.MessageEmbed();
    if(player){
        embed.setTitle(`Inventaire de ${player.getName()}`);
        embed.setDescription(`‚öîÔ∏è : Equipper un objet\nüóëÔ∏è : Jeter un objet\n\n**--- Inventaire ---**`)
        for(i=0;i<9;i++){
            embed.addField(`Slot ${i+1}`,DisplaySlot(inventory,i),true);
        }
    } else {
        embed.setTitle("Nous n'avons pas pu trouver votre personnage");
        embed.addField("Si ce n'est pas d√©j√† fait, veuillez commencer l'aventure","`:start`");
    }

    msgInventory.edit(embed);

    slotInterraction(message,inventory,player);
}

/**
 * Renvoie le contenu d'un emplacement de l'inventaire.
 * @param {Inventory} inventory Inventaire du joueur
 * @param {Number} slot Emplacement de l'inventaire
 * @returns {String} Texte indiquant le contenu de l'emplacement.
 */
function DisplaySlot(inventory,slot){
    if(inventory.slots[slot] == 0){
        return "**Empty slot**";
    } else {
        return `** ${ItemList[inventory.slots[slot]].name} ** \n ${ItemList[inventory.slots[slot]].summary}`
    }
}

/**
 * Renvoie un bool√©en indiquant si l'√©moji sert ou non √† int√©ragir avec le programme.
 * @param {Discord.MessageReaction} reaction Reaction soumise par le joueur
 * @param {Array<Discord.Emoji>} emojis Tableau contenant les √©mojis qui servent a l'int√©raction.
 * @returns {Boolean} Bool√©en indiquant l'utilit√© de l'√©moji.
 */
const reactionIsCorrect = function (reaction,emojis) {
    let contains = false;

    for (reac in emojis) {
       if (emojis[reac] == reaction.emoji.name)
          contains = true;
    }
    
    return contains
 }

 /**
  * Ajoute les r√©actions au message envoy√© par le bot.
  * G√®re les effets de ces r√©actions.
  * @param {Discord.Message} message Message contenant la commande envoy√©e par le joueur.
  * @param {Inventory} inventory Inventaire du joueur.
  * @param {Player} player Objet Player associ√© au joueur.
  */
async function slotInterraction(message,inventory,player){
    for(reac of invReact){
        await msgInventory.react(reac);
    }

    const filter = (reaction, user) => {
        return (reactionIsCorrect(reaction,invReact) && user.id === message.author.id);
        };

    const collector = msgInventory.createReactionCollector(filter, {time: 120000});

    collector.on("collect", (reaction) => {
        switch(reaction.emoji.name){
            case "‚öîÔ∏è":
                EquipItem(message,inventory,player);
                break;
            case "üóëÔ∏è":
                DropItem(message,inventory);
                break;
        }
    });
}

/**
 * Actualise le message affichant l'inventaire pour indiquer au joueur qu'il cherche √† √©quipper un objet.
 * Actualise les r√©actions pour que le joueur puisse choisir un emplacement.
 * Quand le joueur clique sur une r√©action, cela remplace son objet √©quipp√© par l'objet dans l'emplacement s√©lectionn√©
 * et remplace l'objet dans l'emplacement par celui pr√©cedemment √©quip√©.
 * @param {Discord.Message} message Message contenant la commande envoy√©e par le joueur.
 * @param {Inventory} inventory Inventaire du joueur.
 * @param {Player} player Objet Player associ√© au joueur.
 */
async function EquipItem(message,inventory,player){
    await msgInventory.reactions.removeAll();
    embed.setDescription("Pour s'√©quipper d'un objet, cliquez sur la r√©action correspondante.\nPar exemple, pour s'√©quipper de l'objet dans le slot 1, cliquez sur 1Ô∏è‚É£\n\n**--- Inventaire ---**")
    msgInventory.edit(embed);
    for(i = 0; i<9;i++){
        if(inventory.slots[i] != 0){
            await msgInventory.react(equipReact[i]);
        }
    }

    const filter = (reaction, user) => {
        return (reactionIsCorrect(reaction,equipReact) && user.id === message.author.id);
        };

    const collector = msgInventory.createReactionCollector(filter, {time: 120000});

    collector.on("collect", async function(reaction) {
        switch(reaction.emoji.name){
            case "1Ô∏è‚É£":
                inventory.equipItem(player,0);
                break;
            case "2Ô∏è‚É£":
                inventory.equipItem(player,1);
                break;
            case "3Ô∏è‚É£":
                inventory.equipItem(player,2);
                break;
            case "4Ô∏è‚É£":
                inventory.equipItem(player,3);
                break;
            case "5Ô∏è‚É£":
                inventory.equipItem(player,4);
                break;
            case "6Ô∏è‚É£":
                inventory.equipItem(player,5);
                break;
            case "7Ô∏è‚É£":
                inventory.equipItem(player,6);
                break;
            case "8Ô∏è‚É£":
                inventory.equipItem(player,7);
                break;
            case "9Ô∏è‚É£":
                inventory.equipItem(player,8);
                break;
        }
        console.log(player);
        playerManager.updatePlayer(player);
        inventoryManager.updateInventory(message, inventory);
        await msgInventory.reactions.removeAll();
        DisplayInventory(message,inventory);
    });
}

/**
 * Actualise le message affichant l'inventaire pour indiquer au joueur qu'il cherche √† √©quipper un objet.
 * Actualise les r√©actions pour que le joueur puisse choisir un emplacement.
 * Quand le joueur clique sur une r√©action cela va remplacer l'emplacement s√©lectionn√© par un emplacement vide.
 * @param {Discord.Message} message Message contenant la commande envoy√©e par le joueur.
 * @param {Inventory} inventory Inventaire du joueur.
 */
async function DropItem(message,inventory){
    await msgInventory.reactions.removeAll();
    embed.setDescription("Pour jeter un objet, cliquez sur la r√©action correspondante.\nPar exemple, pour jeter l'objet dans le slot 1, cliquez sur 1Ô∏è‚É£\n:warning: Attention cette op√©ration est irreversible ! :warning:\n\n**--- Inventaire ---**")
    msgInventory.edit(embed);
    for(i = 0; i<9;i++){
        if(inventory.slots[i] != 0){
            await msgInventory.react(equipReact[i]);
        }
    }

    const filter = (reaction, user) => {
        return (reactionIsCorrect(reaction,equipReact) && user.id === message.author.id);
        };

    const collector = msgInventory.createReactionCollector(filter, {time: 120000});

    collector.on("collect", async function(reaction){
        switch(reaction.emoji.name){
            case "1Ô∏è‚É£":
                inventory.dropItem(0);
                break;
            case "2Ô∏è‚É£":
                inventory.dropItem(1);
                break;
            case "3Ô∏è‚É£":
                inventory.dropItem(2);
                break;
            case "4Ô∏è‚É£":
                inventory.dropItem(3);
                break;
            case "5Ô∏è‚É£":
                inventory.dropItem(4);
                break;
            case "6Ô∏è‚É£":
                inventory.dropItem(5);
                break;
            case "7Ô∏è‚É£":
                inventory.dropItem(6);
                break;
            case "8Ô∏è‚É£":
                inventory.dropItem(7);
                break;
            case "9Ô∏è‚É£":
                inventory.dropItem(8);
                break;
        }
        inventoryManager.updateInventory(message, inventory);
        await msgInventory.reactions.removeAll();
        DisplayInventory(message,inventory);
    });
}


module.exports.InventoryCommand = InventoryCommand;